Program dan Process, pada program itu ada urutan instruksi dari awal hingga ke akhir, urutan instruksi ada pada program dan waktu kita eksekusi akan lempar ke OS (Operating System) agar bisa disimpan ke Memory. Pada saat berada di Memory, Program tadi strukturnya akan berubah menjadi process. Process didalam memory akan memiliki area memory yang isinya berkaitan dengan Program tersebut. Akan juga didalamnya sebuah Stack, Stack adalah loop fungsi dan sebagainya. Ada juga area data dan code. Jika ada program lain yang dijalankan akan dieksekusi dalam bentuk Process dengan isi yang serupa. Pada process juga terdapat PCB sebagai alat tracking untuk memastikan kode mana yang sudah dieksekusi. OS sendiri merupakan sebuah proses yang terhubung langsung ke CPU (Central Processing Unit) dan mengatur bagian kode apa yang dijalankan ke CPU. Di CPU jaman sekarang Multi Core adalah hal umum, yang berarti memungkinkan untuk menjalankan instruksi secara parallel sejumlah Core yang tersedia.
Ketika menjalankan Thread ada kemungkinan delay karena terjadi I/O Bound. Penyebabnya adalah terhambatnya instruksi karena perangkat I/O yang dibutuhkan diinstruksi sedang tidak tersedia. Sehinnga eksekusi program akan lebih lambat karena harus menunggu dan CPU akan idle saat menunggu. Hal ini mudah terjadi pada Single Thread dan karena perangkat I/O biasaya bekerja lebih lambat dari CPU. Concurrency berusaha menyelesaikan masalah ini dengan cara membuat CPU mengeksekusi hal lain ketika sedanng menunggu perangkat I/O sehingga mengurangi waktu Idle. Lalu delay berikutnya karena CPU menjalankan instruksi secara intensif atau CPU Bound.  Hal ini dapat diatasi dengan Multi Core dengan memecah Program sehingga bagian-bagian Instruksinya dapat dipecah dilakukan secara Parallel (Parallelism). Hal yang bekerja secara Parallel blm tentu Concurrent.
Program dapat dieksekusi secara Asynchronous dan Synchronous, sebuah instruksi atau fungsi yang dijalankan dan dilempar nantinya tapi tidak harus dikerjakan dan ditunggu saat runtime. Pada metode Synchronous agar fungsi kembali ke thread utama akan menunggu t waktu sebelum kembali ke program utama. Sedangkan pada Asynchronous ketika kita memanggil fungsi,fungsinya diinterupsi lalu kembali ke thread utama, fungsi yang tadi terpanggil akan dieksekusi ditempat lain. Ketika fungsi yang dilempar ke thread lain sudah selesai akan menginterupsi thread utama lalu kembali ke thread utama melalui callback.
Pada Bahasa yang kita gunakan (Python), Bahasa Pemrograman yang terhitung modern, sudah memfasilitasi library-library yang dapat membantu menangani masalah seperti CPU Bound atau I/O bound yang sudah dijelaskan sebelumnya. Untuk menangani masalah CPU Bound, ada library Multiprocessing dan Process Tool dan untuk menangani masalah I/O Bound, ada library Threading dan Async Threadio. Saat Multi Thread dijalankan, threading akan dilakukan oleh library yang berada pada Program yang sama, yang berarti komunikasi antar thread dapat dilakukan dengan bantuan global variabel karena terletak pada memory area yang sama. Sedangkan pada Multi Process, komunikasi antar proses dilakukan lewat mekanisme external (seperti queue,file, dan pipe).
Library pada studi kasus kelas, akan menggunakan request, untuk mendownload resource dari internet. Yang akan diuji waktu download awal hingga ke download selesai. Pada single thread tidak perlu library threading, dan program akan berjalan secara serial (Memakan 9, detik untuk 4 request). Ketika menggunakan Threading pada Multi Thread dan memanggil fungsinya kedalam target dengan argument yaitu parameter yang dibutuhkan fungsinya. Ketika setiap thread selesai,setiap thread akan join,dan jika semua thread sudah join atau kembali ke thread utama akan tertulis waktu selesainya.(Memakan waktu 3, detik untuk keseluruhan karena waktu cpu idle minim untuk 4 request). Sedangkan pada Multi Thread Asynchronous menggunakan library concurrent dengan max_worker sebagai jumlah thread yang akan bekerja bersamaan, misal ada 4 request maka akan bekerja secara 2 request per 2 thread. Performa sangat ditentukan jumlah worker (5 detik untuk 2 worker). Sedangkan pada multi process digunakan untuk kegiatan cpu-bound karena cpu biasanya bekerja lebih intensif. Sama seperti multi thread biasa dia menggunakan target dan parameter args. Dan pada Multi Process Asynchronous ada jumlah process yang dapat dikerjakan secara simultan. Pada python dibutuhkan Multi Process karena dapat membantu menghindari lock file yang ada pada Bahasa pemrograman Python yang dapat ditemui pada Multi Thread. Keunggulan dari Multi Thread hanya ada satu area memori karena berada dalam satu proses. Agar maksimal performanya dapat dibantu dengan metode Asynchronous. Lalu pada Asyncio membuat pemrograman secara async pada python.

